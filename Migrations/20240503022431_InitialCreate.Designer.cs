// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using pedals_api.Repositories.EntityFramework.DbContexts;

#nullable disable

namespace pedals_api.Migrations
{
    [DbContext(typeof(PedalsContext))]
    [Migration("20240503022431_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("pedals_api.Models.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Artist", (string)null);
                });

            modelBuilder.Entity("pedals_api.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            Name = "Overdrive/Distortion"
                        },
                        new
                        {
                            Id = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa5"),
                            Name = "Delay/Reverb"
                        },
                        new
                        {
                            Id = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa4"),
                            Name = "Modulation"
                        });
                });

            modelBuilder.Entity("pedals_api.Models.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MediaTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MomentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PedalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MediaTypeId");

                    b.HasIndex("MomentId");

                    b.HasIndex("PedalId");

                    b.ToTable("Media", (string)null);
                });

            modelBuilder.Entity("pedals_api.Models.MediaType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MediaType", (string)null);
                });

            modelBuilder.Entity("pedals_api.Models.Moment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PedalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("PedalId");

                    b.ToTable("Moment", (string)null);
                });

            modelBuilder.Entity("pedals_api.Models.Pedal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Pedal", (string)null);
                });

            modelBuilder.Entity("pedals_api.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PedalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PedalId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("pedals_api.Models.Media", b =>
                {
                    b.HasOne("pedals_api.Models.MediaType", "MediaType")
                        .WithMany()
                        .HasForeignKey("MediaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pedals_api.Models.Moment", null)
                        .WithMany("Medias")
                        .HasForeignKey("MomentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pedals_api.Models.Pedal", null)
                        .WithMany("Medias")
                        .HasForeignKey("PedalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MediaType");
                });

            modelBuilder.Entity("pedals_api.Models.Moment", b =>
                {
                    b.HasOne("pedals_api.Models.Artist", null)
                        .WithMany("Moments")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pedals_api.Models.Pedal", null)
                        .WithMany("Moments")
                        .HasForeignKey("PedalId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("pedals_api.Models.Pedal", b =>
                {
                    b.HasOne("pedals_api.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("pedals_api.Models.Product", b =>
                {
                    b.HasOne("pedals_api.Models.Pedal", null)
                        .WithMany("Products")
                        .HasForeignKey("PedalId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("pedals_api.Models.Artist", b =>
                {
                    b.Navigation("Moments");
                });

            modelBuilder.Entity("pedals_api.Models.Moment", b =>
                {
                    b.Navigation("Medias");
                });

            modelBuilder.Entity("pedals_api.Models.Pedal", b =>
                {
                    b.Navigation("Medias");

                    b.Navigation("Moments");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
